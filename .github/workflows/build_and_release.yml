# GitHub Actions: Flutter Build & Release
# This workflow is triggered on pushes to the 'main' branch.
# It builds the Flutter app for Android (APKs and AAB) and creates a GitHub Release
# to distribute the artifacts.

name: Flutter Build & Release

on:
  push:
    branches:
      - main # Or your default branch, e.g., master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout the code
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Set up Java environment for Gradle
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu' # A popular OpenJDK distribution
          java-version: '17'   # The Java version required by the current Android Gradle Plugin

      # 3. Set up Flutter environment
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable' # Use the stable channel of Flutter
          cache: true       # Enable caching for faster builds

      # 4. Get Flutter dependencies
      - name: Install dependencies
        run: flutter pub get

      # 5. Decode and set up Android signing key
      # IMPORTANT: You must configure the secrets in your repository settings for this to work.
      # SIGNING_KEY_JKS_BASE64: Your keystore file, base64 encoded.
      # KEY_PROPERTIES: The content of your key.properties file.
      - name: Decode and set up signing key
        run: |
          echo "Writing key.properties"
          echo "${{ secrets.KEY_PROPERTIES }}" > android/key.properties
          echo "Decoding and writing keystore"
          echo "${{ secrets.SIGNING_KEY_JKS_BASE64 }}" | base64 --decode > android/app/upload-keystore.jks
        # This step will fail if secrets are not configured. This is expected.
        # It ensures that builds without secrets do not proceed to release.
        env:
          SIGNING_KEY_JKS_BASE64: ${{ secrets.SIGNING_KEY_JKS_BASE64 }}
          KEY_PROPERTIES: ${{ secrets.KEY_PROPERTIES }}

      # 6. Build Android APKs (split by architecture)
      - name: Build release APKs
        run: flutter build apk --split-per-abi

      # 7. Build Android App Bundle (AAB)
      - name: Build release App Bundle
        run: flutter build appbundle

      # 8. Create a GitHub Release and upload artifacts
      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          # This token is provided by Actions, you do not need to create your own token
          token: ${{ secrets.GITHUB_TOKEN }}
          # Define the artifacts to be uploaded
          artifacts: "build/app/outputs/apk/release/*.apk,build/app/outputs/bundle/release/*.aab"
          # Create a release name based on the commit hash and date
          name: "Release ${{ github.sha }} (${{ env.RELEASE_DATE }})"
          # Create a tag for the release
          tag: "release-${{ github.run_number }}"
          # Allow updating a release if the tag already exists
          allowUpdates: true
          # Set the release body content
          body: "Automated release triggered by commit ${{ github.sha }} on branch ${{ github.ref_name }}."
          # Make it a pre-release
          prerelease: true
        env:
          RELEASE_DATE: $(date +'%Y-%m-%d %H:%M:%S')
